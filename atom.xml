<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白哥的博客</title>
  
  <subtitle>白哥的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-11T04:25:18.695Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>白哥</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode230. 二叉搜索树中第K小的元素</title>
    <link href="http://yoursite.com/2019/06/10/leetcode230.%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2019/06/10/leetcode230. 二叉搜索树中第K小的元素/</id>
    <published>2019-06-10T13:56:50.499Z</published>
    <updated>2019-06-11T04:25:18.695Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。</p><p><strong>说明：</strong> 你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong> root = [3,1,4,null,2], k = 1<br><img src="https://img-blog.csdnimg.cn/20190610215238393.png" alt="在这里插入图片描述"><br><strong>输出:</strong> 1<br><strong>示例 2:</strong></p><p><strong>输入:</strong> root = [5,3,6,2,4,null,null,1], k = 3<br>       <img src="https://img-blog.csdnimg.cn/20190610215250643.png" alt="5      / \     3   6    / \    2   4   /  1"><br><strong>输出:</strong> 3</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst" target="_blank" rel="noopener">https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst</a></p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>因为二叉搜索树的左子树的元素全部小于根节点，右子树的元素大于根节点，因此<br>第一步： 先计算出左子树的个数；<br>第二步： 判断左子树个数left跟k的关系</p><pre><code>1. left &gt;= k则说明题目所求第k小的元素在左子树上，递归调用原函数2. left+1 == k则说明所求元素为根节点元素3. 1、2不成立则在右子树上，而所求元素变为第k-left-1小的元素。</code></pre><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int kthSmallest(TreeNode root, int k) &#123;</span><br><span class="line">        int left = helper(root.left);</span><br><span class="line">        if (left &gt;= k) &#123;</span><br><span class="line">            return kthSmallest(root.left, k);</span><br><span class="line">        &#125; else if (left + 1 == k) &#123;</span><br><span class="line">            return root.val;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return kthSmallest(root.right, k - left-1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public int helper(TreeNode root) &#123;</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return 1 + helper(root.left) + helper(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p><img src="https://img-blog.csdnimg.cn/2019061021564129.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt; 你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。&lt;/p&gt;
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode229. 求众数 II</title>
    <link href="http://yoursite.com/2019/06/10/leetcode229.%20%E6%B1%82%E4%BC%97%E6%95%B0%20II/"/>
    <id>http://yoursite.com/2019/06/10/leetcode229. 求众数 II/</id>
    <published>2019-06-10T13:18:29.275Z</published>
    <updated>2019-06-11T04:25:04.227Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>给定一个大小为 n 的数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。</p><p>说明: 要求算法的时间复杂度为 O(n)，空间复杂度为 O(1)。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong> [3,2,3]<br><strong>输出:</strong> [3]<br><strong>示例 2:</strong></p><p><strong>输入:</strong> [1,1,1,3,3,2,2,2]<br><strong>输出:</strong> [1,2]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/majority-element-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/majority-element-ii</a></p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用摩尔投票法，得出超过⌊ n/3 ⌋ 次的元素，因为只可能有0-2个数，所以使用2个变量来保存即可。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;Integer&gt; majorityElement(int[] nums) &#123;</span><br><span class="line">        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        int numA = 0, numB = 0, countA = 0, countB = 0;</span><br><span class="line">        for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">            if (nums[i] == numA) &#123;</span><br><span class="line">                countA++;</span><br><span class="line">            &#125; else if (numB == nums[i]) &#123;</span><br><span class="line">                countB++;</span><br><span class="line">            &#125; else if (countA == 0) &#123;</span><br><span class="line">                numA = nums[i];</span><br><span class="line">                countA++;</span><br><span class="line">            &#125; else if (countB == 0) &#123;</span><br><span class="line">                numB = nums[i];</span><br><span class="line">                countB++;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                countA--;</span><br><span class="line">                countB--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        countA = 0;</span><br><span class="line">        countB = 0;</span><br><span class="line">        for (int num: nums)&#123;</span><br><span class="line">            if (numA == num) &#123;</span><br><span class="line">                countA++;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (numB == num) &#123;</span><br><span class="line">                countB++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (countA &gt; nums.length/3)&#123;</span><br><span class="line">            res.add(numA);</span><br><span class="line">        &#125;</span><br><span class="line">        if (countB &gt; nums.length/3)&#123;</span><br><span class="line">            res.add(numB);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p><img src="https://img-blog.csdnimg.cn/20190610211817239.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个大小为 n 的数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。&lt;/p&gt;
&lt;p&gt;说明: 要求算法的时间复杂度为 O(n)，空间复杂度为 O(1)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode228. 汇总区间</title>
    <link href="http://yoursite.com/2019/06/10/leetcode228.%20%E6%B1%87%E6%80%BB%E5%8C%BA%E9%97%B4/"/>
    <id>http://yoursite.com/2019/06/10/leetcode228. 汇总区间/</id>
    <published>2019-06-10T08:12:28.296Z</published>
    <updated>2019-06-11T04:25:29.879Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><p>给定一个无重复元素的有序整数数组，返回数组区间范围的汇总。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong> [0,1,2,4,5,7]<br><strong>输出:</strong> [“0-&gt;2”,”4-&gt;5”,”7”]<br><strong>解释:</strong> 0,1,2 可组成一个连续的区间; 4,5 可组成一个连续的区间。<br><strong>示例 2:</strong></p><p><strong>输入:</strong> [0,2,3,4,6,8,9]<br><strong>输出:</strong> [“0”,”2-&gt;4”,”6”,”8-&gt;9”]<br><strong>解释:</strong> 2,3,4 可组成一个连续的区间; 8,9 可组成一个连续的区间。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/summary-ranges" target="_blank" rel="noopener">https://leetcode-cn.com/problems/summary-ranges</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用双指针，判断<strong>nums[next] - nums[pre] == next-pre</strong>即可。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><pre><code>class Solution {    public List&lt;String&gt; summaryRanges(int[] nums) {        if (nums.length &lt; 1) {            return new ArrayList&lt;&gt;();        }        List&lt;String&gt; res = new ArrayList&lt;&gt;();        if (nums.length &lt; 2) {            res.add(String.valueOf(nums[0]));            return res;        }        int pre = 0, next = 1;        while (pre &lt; nums.length) {            while (next &lt; nums.length &amp;&amp; nums[next] - nums[pre] == next-pre) {                next++;            }            if (next - 1 != pre) {                res.add(nums[pre] + &quot;-&gt;&quot; + nums[next-1]);            } else {                res.add(String.valueOf(nums[pre]));            }            pre = next;        }        return res;    }}</code></pre><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p><img src="https://img-blog.csdnimg.cn/20190610161209582.png" alt="&gt; 这里是引用"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;p&gt;给定一个无重复元素的有序整数数组，返回数组区间范围的汇总。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; [0,1,2,4,5,7]&lt;br&gt;&lt;strong&gt;输出:&lt;/stron
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode220. 存在重复元素 III</title>
    <link href="http://yoursite.com/2019/06/06/leetcode220.%20%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20III/"/>
    <id>http://yoursite.com/2019/06/06/leetcode220. 存在重复元素 III/</id>
    <published>2019-06-06T03:26:32.976Z</published>
    <updated>2019-06-06T07:57:25.114Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>给定一个整数数组，判断数组中是否有两个不同的索引 i 和 j，使得 nums [i] 和 nums [j] 的差的绝对值最大为 t，并且 i<br>和 j 之间的差的绝对值最大为 ķ。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong> nums = [1,2,3,1], k = 3, t = 0<br><strong>输出:</strong> true<br><strong>示例 2:</strong></p><p><strong>输入:</strong> nums = [1,0,1,1], k = 1, t = 2<br><strong>输出</strong>: true<br><strong>示例 3:</strong></p><p><strong>输入:</strong> nums = [1,5,9,1,5,9], k = 2, t = 3<br><strong>输出:</strong> false</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>此题有2种解题思路。<br>第一种：根据数组下标，根据下标相差不超过k去找出符合条件的元素<br>第二种：根据数组元素的值，根据值不超过t去找出符合条件的元素<br><strong>思路一：</strong>  这思路比较容易想到，<br>首先，遍历数组nums[i]；<br>然后，再去找出[i,i+k]之间是否有符合题目要求的元素；<br>如果有，则返回true，没有则继续查找。<br>在此题中的样例40这种思路是ac不了的，必须加个判断条件<strong>if(k==10000) return false;</strong><br>（才能通过，这条件也是我使用第二种方法ac之后看了别人的代码才知道的。）<br><strong>思路二：</strong><br>第一步： 使用一个数组，保存每一个nums的值和对应的下标<br>第二步： 通过其中的值进行排序<br>第三步： <strong>根据nums [i] 和 nums [j] 的差的绝对值小于等于t</strong>去判断<strong>nums [i] 和 nums [j] 的下标的差是否是小于等于k</strong>，如果是则返回true，不是则继续查找。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><p>思路一<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) &#123;</span><br><span class="line">        int pre = 0, next = 1;</span><br><span class="line">        if(k==10000) return false;</span><br><span class="line">        while (pre &lt; nums.length) &#123;</span><br><span class="line">            while (next - pre &lt;= k) &#123;</span><br><span class="line">                if (next &gt;= nums.length) break;</span><br><span class="line">                if (Math.abs((long)nums[next] - nums[pre]) &lt;= t) &#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">                next++;</span><br><span class="line">            &#125;</span><br><span class="line">            next = ++pre + 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路二</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) &#123;</span><br><span class="line">        int[][] numsAndIndex = new int[nums.length][2];</span><br><span class="line">        for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">            numsAndIndex[i][0] = nums[i];</span><br><span class="line">            numsAndIndex[i][1] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        //使用匿名函数Overrides method in Comparator</span><br><span class="line">        //根据二位数组的第一位去排序</span><br><span class="line">        Arrays.sort(numsAndIndex,(a,b) -&gt; (a[0]-b[0]));</span><br><span class="line">        for (int i = 0; i &lt; numsAndIndex.length; i++) &#123;</span><br><span class="line">            for (int j = i+1; j &lt; numsAndIndex.length; j++) &#123;</span><br><span class="line">                if (Math.abs((long)numsAndIndex[j][0] - numsAndIndex[i][0]) &gt; t)&#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                if (Math.abs(numsAndIndex[j][1] - numsAndIndex[i][1]) &lt;= k)&#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p><strong>第一种</strong><br>成功<br>显示详情<br>执行用时 : 0 ms, 在Contains Duplicate III的Java提交中击败了100.00% 的用户<br>内存消耗 : 37.3 MB, 在Contains Duplicate III的Java提交中击败了81.18% 的用户<br><strong>第二种</strong><br>成功<br>显示详情<br>执行用时 : 90 ms, 在Contains Duplicate III的Java提交中击败了11.48% 的用户<br>内存消耗 : 38.8 MB, 在Contains Duplicate III的Java提交中击败了69.10% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个整数数组，判断数组中是否有两个不同的索引 i 和 j，使得 nums [i] 和 nums [j] 的差的绝对值最大为 t，并且 i&lt;br&gt;和 j 之间的差的绝对值最大为 ķ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode216. 组合总和 III</title>
    <link href="http://yoursite.com/2019/05/30/leetcode216.%20%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%20III/"/>
    <id>http://yoursite.com/2019/05/30/leetcode216. 组合总和 III/</id>
    <published>2019-05-30T11:14:19.721Z</published>
    <updated>2019-06-05T12:45:49.491Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。</p><p><strong>说明：</strong></p><p>所有数字都是正整数。 解集不能包含重复的组合。<br><strong>示例 1:</strong></p><p><strong>输入:</strong> k = 3, n = 7<br><strong>输出:</strong> [[1,2,4]]<br><strong>示例 2:</strong></p><p><strong>输入:</strong> k = 3, n = 9<br><strong>输出:</strong> [[1,2,6], [1,3,5], [2,3,4]]</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>就是用深度搜索进行k个(1-9)的数全排列，如果等于n，则放入结果集，注意一下去重即可。<br>去重的思路：在dfs方法传入一个参数num，每次全排列的下一个位数都从num+1开始，就可以去除重复的值了。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; combinationSum3(int k, int n) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res =  new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        dfs(res, list, n,k,0,0);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void dfs(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list, int n, int k, int sum, int num) &#123;</span><br><span class="line">        if(sum &gt; n) return;</span><br><span class="line">        if (list.size() == k)&#123;</span><br><span class="line">            if(sum == n) &#123;</span><br><span class="line">                res.add(new ArrayList&lt;&gt;(list));</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = num+1; i &lt;= 9; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">            dfs(res, list, n, k, sum+i, i);</span><br><span class="line">            list.remove(list.size()-1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 2 ms, 在Combination Sum III的Java提交中击败了67.42% 的用户<br>内存消耗 : 33.6 MB, 在Combination Sum III的Java提交中击败了29.97% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有数字都是正整数。 解集不能包
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode215. 数组中的第K个最大元素</title>
    <link href="http://yoursite.com/2019/05/29/leetcode215.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2019/05/29/leetcode215. 数组中的第K个最大元素/</id>
    <published>2019-05-29T13:20:57.243Z</published>
    <updated>2019-05-30T01:48:25.788Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong> [3,2,1,5,6,4] 和 k = 2<br><strong>输出:</strong> 5<br><strong>示例 2:</strong></p><p><strong>输入:</strong> [3,2,3,1,2,4,5,5,6] 和 k = 4<br><strong>输出:</strong> 4<br><strong>说明:</strong></p><p>你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>学过算法的应该清楚这题是使用快排的思想来解决。<br>第一步：利用快排的方法，每次取一个数num，把一个数组分为左右2堆，左边的比num小，右边的比num大，返回num在数组的位置index；<br>第二步：判断index和数组长度len-k的大小，如果<strong>index &gt; nums.length-k</strong>则说明第k大的数在[l,index-1]之间，否则在[index+1,r]之间；<br>第三步：再回到第一步继续判断直到<strong>index==nums.length-k</strong>即可。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int findKthLargest(int[] nums, int k) &#123;</span><br><span class="line">        int p = 0, r = nums.length-1;</span><br><span class="line">        if(p &gt;= r) &#123;</span><br><span class="line">            return nums[p];</span><br><span class="line">        &#125;</span><br><span class="line">        int index = partition(nums, p, r);</span><br><span class="line">        while (index != nums.length-k) &#123;</span><br><span class="line">            if (index &gt; nums.length-k) &#123;</span><br><span class="line">                r = index - 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                p = index + 1;</span><br><span class="line">            &#125;</span><br><span class="line">            index = partition(nums, p, r);</span><br><span class="line">        &#125;</span><br><span class="line">        return nums[nums.length-k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int partition(int[] nums, int l, int r) &#123;</span><br><span class="line">    //使用随机化的快速排序，会大大加快速度（leetcode的样例就是这么刁钻）</span><br><span class="line">        int random = l+(int)(Math.random()*(r-l));</span><br><span class="line">        swap(nums, l, random);</span><br><span class="line">        int x = nums[l];</span><br><span class="line">        int lo = l+1, hi = r;</span><br><span class="line">        while (lo &lt;= hi) &#123;</span><br><span class="line">            while (lo &lt;= hi &amp;&amp; nums[lo] &lt; x) &#123;</span><br><span class="line">                lo++;</span><br><span class="line">            &#125;</span><br><span class="line">            while (lo &lt;= hi &amp;&amp; nums[hi] &gt; x) &#123;</span><br><span class="line">                hi--;</span><br><span class="line">            &#125;</span><br><span class="line">            if (lo &lt;= hi) &#123;</span><br><span class="line">                swap(nums, lo++, hi--);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums, l, hi);</span><br><span class="line">        return hi;</span><br><span class="line">    &#125;</span><br><span class="line">    //交换数组中的元素位置</span><br><span class="line">    public void swap(int[] nums, int n, int m) &#123;</span><br><span class="line">        if (n == m) return;</span><br><span class="line">        int tmp = nums[n];</span><br><span class="line">        nums[n] = nums[m];</span><br><span class="line">        nums[m] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 3 ms, 在Kth Largest Element in an Array的Java提交中击败了97.95% 的用户<br>内存消耗 : 39 MB, 在Kth Largest Element in an Array的Java提交中击败了67.34% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JVM学习笔记</title>
    <link href="http://yoursite.com/2019/05/29/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/29/JVM学习笔记/</id>
    <published>2019-05-29T07:07:54.126Z</published>
    <updated>2019-05-29T07:12:28.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JVM学习"><a href="#JVM学习" class="headerlink" title="JVM学习"></a>JVM学习</h2><h3 id="JVM如何加载-class文件"><a href="#JVM如何加载-class文件" class="headerlink" title="JVM如何加载.class文件"></a>JVM如何加载.class文件</h3><p><strong>JVM虚拟机</strong></p><p><img src="https://img-blog.csdnimg.cn/20190529150652107.png" alt="在这里插入图片描述"><br>Class Loader：以及特定格式，加载class文件到内存</p><p>Execution Engine：对命令进行解析</p><p>Native Interface：融合不同开发语言的原生库为java所用</p><p>Runtime Data Area：JVM内存空间结构模型</p><h3 id="类从编译到执行的过程"><a href="#类从编译到执行的过程" class="headerlink" title="类从编译到执行的过程"></a>类从编译到执行的过程</h3><p>编译器将java源文件编译成class字节码文件</p><p>ClassLoader将字节码转换为JVM中的Class对象</p><p>JVM利用Class对象实例化为实例对象</p><h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><p>ClassLoader在Java中有着非常重要的作用，它主要工作在Class装载的加载阶段，其主要作用是从系统外部获取Class二进制数据流。它是Java的核心组件，所有的Class都是由ClassLoader进行加载的，ClassLoader负责通过将Class文件里的二进制数据流装载进系统，然后交给Java虚拟机进行链接、初始化等操作。</p><h3 id="ClassLoader的种类"><a href="#ClassLoader的种类" class="headerlink" title="ClassLoader的种类"></a>ClassLoader的种类</h3><ul><li><p>[ ] BootStrapClassLoader：C++编写，加载核心库java.*</p></li><li><p>[ ] ExtClassLoader：Java编写，加载扩展库javax.*</p></li><li><p>[ ] AppClassLoader：Java编写，加载程序所在目录</p></li><li><p>[ ] 自定义ClassLoader：Java编写，定制化加载</p></li></ul><h3 id="类的加载方式"><a href="#类的加载方式" class="headerlink" title="类的加载方式"></a>类的加载方式</h3><p>隐式加载：new</p><p>显式加载：loadClass，forName等</p><h3 id="类的装载过程"><a href="#类的装载过程" class="headerlink" title="类的装载过程"></a>类的装载过程</h3><ol><li>加载： 通过ClassLoader加载class文件字节码，生成Class对象</li><li>链接：<ul><li>校验：检查加载的class的正确性和安全性</li><li>准备：为类变量分配存储空间并设置类变量初始值</li><li>解析：JVM将常量池内的符号引用转换为直接引用</li></ul></li><li>初始化：执行类变量赋值和静态代码块</li></ol><h3 id="loadClass和forName的区别"><a href="#loadClass和forName的区别" class="headerlink" title="loadClass和forName的区别"></a>loadClass和forName的区别</h3><p>Class.forName得到的class是已经初始化完成的</p><p>ClassLoader.loadClass得到的clas是还没有链接的</p><h3 id="JVM内存模型-JDK8"><a href="#JVM内存模型-JDK8" class="headerlink" title="JVM内存模型-JDK8"></a>JVM内存模型-JDK8</h3><p><img src="https://img-blog.csdnimg.cn/20190529150723636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDQ4NTc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>线程私有：程序计数器、虚拟机栈、本地方法栈</li><li>线程共享：MetaSpace、Java堆</li></ul><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><ul><li>当前线程所执行的字节码行号指示器（逻辑）</li><li>改变计数器的值来选取下一条需要执行的字节码指令</li><li>和线程是一对一的关系，即“线程私有”</li><li>对Java方法计数，如果是Native方法则计数器值为Undefined</li><li>不会发生内存泄漏</li></ul><h4 id="Java虚拟机栈（Stack）"><a href="#Java虚拟机栈（Stack）" class="headerlink" title="Java虚拟机栈（Stack）"></a>Java虚拟机栈（Stack）</h4><p><img src="https://img-blog.csdnimg.cn/20190529150740675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDQ4NTc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>Java方法执行的内存模型</li><li>包含多个栈帧</li></ul><h5 id="局部变量表和操作数栈"><a href="#局部变量表和操作数栈" class="headerlink" title="局部变量表和操作数栈"></a>局部变量表和操作数栈</h5><ul><li>局部变量表：包含方法执行过程中的所有变量</li><li>操作数栈：入栈、出栈、复制、交换、产生消费变量</li></ul><h5 id="递归为什么会引发java-lang-StackOverflowError异常"><a href="#递归为什么会引发java-lang-StackOverflowError异常" class="headerlink" title="递归为什么会引发java.lang.StackOverflowError异常"></a>递归为什么会引发java.lang.StackOverflowError异常</h5><p>递归过深，栈帧数超过虚拟栈深度</p><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>与虚拟机栈相似，主要作用于标注了native的方法</p><h4 id="元空间（Metaspace）："><a href="#元空间（Metaspace）：" class="headerlink" title="元空间（Metaspace）："></a>元空间（Metaspace）：</h4><p>存储已被虚拟机加载的类信息。随着JDK8的到来，JVM不再有方法区（PermGen），原方法区存储的信息被分成两部分：</p><p>1、虚拟机加载的类信息，被移动到元空间。</p><p>2、运行时常量池，被移动到了堆中<strong>（静态成员变量）</strong>。</p><h5 id="MetaSpace（元空间）相比PermGen（永久代）的优势"><a href="#MetaSpace（元空间）相比PermGen（永久代）的优势" class="headerlink" title="MetaSpace（元空间）相比PermGen（永久代）的优势"></a>MetaSpace（元空间）相比PermGen（永久代）的优势</h5><p>元数据区取代了1.7版本及以前的永久代。元数据区和永久代本质上都是方法区的实现。方法区存放虚拟机加载的类信息，静态变量，常量等数据。</p><ul><li>字符串常量池存在永久代中，容易出现性能问题和内存溢出</li><li>类和方法的信息大小难以确定，给永久代的大小指定带来困难</li><li>永久代会给GC带来不必要的复杂性</li><li>方便HotSpot与其他JVM如 Jrockit的集成</li></ul><h4 id="Java堆（Heap）"><a href="#Java堆（Heap）" class="headerlink" title="Java堆（Heap）"></a>Java堆（Heap）</h4><ul><li>对象实例的分配区域</li><li>GC管理的主要区域</li></ul><h4 id="直接内存（没有在上图体现出来）"><a href="#直接内存（没有在上图体现出来）" class="headerlink" title="直接内存（没有在上图体现出来）"></a>直接内存（没有在上图体现出来）</h4><p>jdk1.4引入了NIO，它可以使用Native函数库直接分配堆外内存。</p><h3 id="JVM三大性能调优参数-Xms-Xmx-Xss的含义"><a href="#JVM三大性能调优参数-Xms-Xmx-Xss的含义" class="headerlink" title="JVM三大性能调优参数 -Xms -Xmx -Xss的含义"></a>JVM三大性能调优参数 -Xms -Xmx -Xss的含义</h3><ul><li>-Xss：规定了每个线程虚拟机栈（堆栈）的大小</li><li>-Xms：堆的初始值</li><li>-Xmx：堆能达到的最大值</li></ul><p>一般Xms和Xmx设置为一样的值，因为扩容时会发生内存抖动。</p><h3 id="Java内存模型中堆和栈的区别——内存分配策略"><a href="#Java内存模型中堆和栈的区别——内存分配策略" class="headerlink" title="Java内存模型中堆和栈的区别——内存分配策略"></a>Java内存模型中堆和栈的区别——内存分配策略</h3><ul><li>静态存储：编译时确定每个数据目标在运行时的存储空间需求</li><li>栈式存储：数据区需求在编译时未知，运行时模块入口前确定</li><li>堆式存储：编译时或运行时模块入口都无法确定，动态分配</li></ul><h3 id="Java内存模型中堆和栈的区别"><a href="#Java内存模型中堆和栈的区别" class="headerlink" title="Java内存模型中堆和栈的区别"></a>Java内存模型中堆和栈的区别</h3><ul><li>管理方式：栈自动释放，堆需要GC</li><li>空间大小：栈比对小</li><li>碎片相关：栈产生的碎片远小于堆</li><li>分配方式：栈支持静态和动态分配，而堆仅支持动态分配</li><li>效率：栈的效率比堆高</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JVM学习&quot;&gt;&lt;a href=&quot;#JVM学习&quot; class=&quot;headerlink&quot; title=&quot;JVM学习&quot;&gt;&lt;/a&gt;JVM学习&lt;/h2&gt;&lt;h3 id=&quot;JVM如何加载-class文件&quot;&gt;&lt;a href=&quot;#JVM如何加载-class文件&quot; class=&quot;he
      
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/05/24/leetcode208.%20%E5%AE%9E%E7%8E%B0%20Trie%20(%E5%89%8D%E7%BC%80%E6%A0%91)/"/>
    <id>http://yoursite.com/2019/05/24/leetcode208. 实现 Trie (前缀树)/</id>
    <published>2019-05-24T12:08:06.153Z</published>
    <updated>2019-05-27T13:34:48.790Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: leetcode208. 实现 Trie (前缀树)<br>date:<br>tags: </p><pre><code>- leetcode- java</code></pre><h2 id="categories-算法"><a href="#categories-算法" class="headerlink" title="categories: 算法"></a>categories: 算法</h2><p>﻿## 题目</p><blockquote><p>实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。</p><p><strong>示例:</strong></p><p>Trie trie = new Trie();</p><p>trie.insert(“apple”); trie.search(“apple”);   // 返回 true<br>trie.search(“app”);     // 返回 false trie.startsWith(“app”); // 返回 true<br>trie.insert(“app”);    trie.search(“app”);     // 返回 true<br><strong>说明:</strong></p><p>你可以假设所有的输入都是由小写字母 a-z 构成的。 保证所有输入均为非空字符串。</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>创建一个结点类，每个结点有26个子结点（26个字母），一个布尔变量，表示该结点是否是某个单词的结尾。<br>然后完成题目要求即可</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">class Trie &#123;</span><br><span class="line">    public class TrieNode&#123;</span><br><span class="line">        boolean isWord;</span><br><span class="line">        TrieNode[] letters = new TrieNode[26];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TrieNode root ;</span><br><span class="line">    public Trie() &#123;</span><br><span class="line">        root = new TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line">    /** Inserts a word into the trie. */</span><br><span class="line">    public void insert(String word) &#123;</span><br><span class="line">        if (word != null) &#123;</span><br><span class="line">            char[] chars = word.toCharArray();</span><br><span class="line">            TrieNode tmp = root;</span><br><span class="line">            for (int i = 0; i &lt; chars.length; i++) &#123;</span><br><span class="line">                if(tmp.letters[chars[i]-&apos;a&apos;] == null)</span><br><span class="line">                    tmp.letters[chars[i]-&apos;a&apos;] = new TrieNode();</span><br><span class="line">                tmp = tmp.letters[chars[i]-&apos;a&apos;];</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.isWord = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** Returns if the word is in the trie. */</span><br><span class="line">    public boolean search(String word) &#123;</span><br><span class="line">        if (word != null) &#123;</span><br><span class="line">            char[] chars = word.toCharArray();</span><br><span class="line">            TrieNode tmp = root;</span><br><span class="line">            for (int i = 0; i &lt; chars.length; i++) &#123;</span><br><span class="line">                if (tmp.letters[chars[i]-&apos;a&apos;] == null)</span><br><span class="line">                    return false;</span><br><span class="line">                tmp = tmp.letters[chars[i]-&apos;a&apos;];</span><br><span class="line">            &#125;</span><br><span class="line">            return tmp.isWord;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** Returns if there is any word in the trie that starts with the given prefix. */</span><br><span class="line">    public boolean startsWith(String prefix) &#123;</span><br><span class="line">        char[] chars = prefix.toCharArray();</span><br><span class="line">        TrieNode tmp = root;</span><br><span class="line">        for (int i = 0; i &lt; chars.length; i++) &#123;</span><br><span class="line">            if (tmp.letters[chars[i]-&apos;a&apos;] == null)</span><br><span class="line">                return false;</span><br><span class="line">            tmp = tmp.letters[chars[i]-&apos;a&apos;];</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 163 ms, 在Implement Trie (Prefix Tree)的Java提交中击败了88.17% 的用户<br>内存消耗 : 61.8 MB, 在Implement Trie (Prefix Tree)的Java提交中击败了76.08% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: leetcode208. 实现 Trie (前缀树)&lt;br&gt;date:&lt;br&gt;tags: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- leetcode
- java
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;categories-算法&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>leetcode207. 课程表</title>
    <link href="http://yoursite.com/2019/05/24/leetcode207.%20%E8%AF%BE%E7%A8%8B%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/05/24/leetcode207. 课程表/</id>
    <published>2019-05-24T01:28:29.406Z</published>
    <updated>2019-05-24T05:40:04.017Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>现在你总共有 n 门课需要选，记为 0 到 n-1。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]</p><p>给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong> 2, [[1,0]]<br><strong>输出:</strong> true<br><strong>解释:</strong> 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。<br><strong>示例 2:</strong></p><p><strong>输入:</strong> 2, [[1,0],[0,1]]<br><strong>输出:</strong> false<br><strong>解释:</strong> 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。<br><strong>说明:</strong></p><p>输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵。详情请参见图的表示法。 你可以假定输入的先决条件中没有重复的边。<br><strong>提示:</strong></p><p>这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。 通过 DFS 进行拓扑排序</p><ul><li>一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。 拓扑排序也可以通过 BFS 完成。</li></ul></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我的解法是直接把图的边剪断，如果最后能够完成所有点没有相连的边即能够完成所有课程，也是故意不用提示的做法去做的。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean canFinish(int numCourses, int[][] prerequisites) &#123;</span><br><span class="line">        //存储可以选读的课程</span><br><span class="line">        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; prerequisites.length; i++) &#123;</span><br><span class="line">            if(!map.containsKey(prerequisites[i][0]))&#123;</span><br><span class="line">                map.put(prerequisites[i][0], 1);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                map.put(prerequisites[i][0], map.get(prerequisites[i][0]) + 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; numCourses; i++) &#123;</span><br><span class="line">            if(!map.containsKey(i))&#123;</span><br><span class="line">                list.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int len = prerequisites.length;</span><br><span class="line">        while(!list.isEmpty()) &#123;</span><br><span class="line">            int tmp = list.remove(list.size()-1);</span><br><span class="line">            for (int i = 0; i &lt; prerequisites.length; i++) &#123;</span><br><span class="line">                if (prerequisites[i][1] == tmp) &#123;</span><br><span class="line">                    len--;</span><br><span class="line">                    if(map.get(prerequisites[i][0]) == 1)&#123;</span><br><span class="line">                        list.add(prerequisites[i][0]);</span><br><span class="line">                    &#125; else&#123;</span><br><span class="line">                        map.put(prerequisites[i][0], map.get(prerequisites[i][0])-1);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return len == 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 47 ms, 在Course Schedule的Java提交中击败了40.49% 的用户<br>内存消耗 : 43.1 MB, 在Course Schedule的Java提交中击败了79.55% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在你总共有 n 门课需要选，记为 0 到 n-1。&lt;/p&gt;
&lt;p&gt;在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]&lt;/p&gt;
&lt;p&gt;给定课程总
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode201. 数字范围按位与</title>
    <link href="http://yoursite.com/2019/05/23/leetcode201.%20%E6%95%B0%E5%AD%97%E8%8C%83%E5%9B%B4%E6%8C%89%E4%BD%8D%E4%B8%8E/"/>
    <id>http://yoursite.com/2019/05/23/leetcode201. 数字范围按位与/</id>
    <published>2019-05-23T13:50:51.069Z</published>
    <updated>2019-05-24T01:01:31.113Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>给定范围 [m, n]，其中 0 &lt;= m &lt;= n &lt;= 2147483647，返回此范围内所有数字的按位与（包含 m, n 两端点）。</p><p><strong>示例 1:</strong> </p><p><strong>输入:</strong> [5,7]<br><strong>输出:</strong> 4<br><strong>示例 2:</strong></p><p><strong>输入:</strong> [0,1]<br><strong>输出:</strong> 0</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>把n、m后面不一样的去掉，剩下一样的，因为不一样的&amp;之后的就是0，使用一个变量保存有多少个0。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int rangeBitwiseAnd(int m, int n) &#123;</span><br><span class="line">        if (m == 0) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int tmp = 1;</span><br><span class="line">        while(n != m)&#123;</span><br><span class="line">            m &gt;&gt;= 1;</span><br><span class="line">            n &gt;&gt;= 1;</span><br><span class="line">            tmp &lt;&lt;= 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return m * tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 36 ms, 在Bitwise AND of Numbers Range的Java提交中击败了30.45% 的用户<br>内存消耗 : 36.5 MB, 在Bitwise AND of Numbers Range的Java提交中击败了10.42% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定范围 [m, n]，其中 0 &amp;lt;= m &amp;lt;= n &amp;lt;= 2147483647，返回此范围内所有数字的按位与（包含 m, n 两端点）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt; &lt;
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode199. 二叉树的右视图</title>
    <link href="http://yoursite.com/2019/05/21/leetcode199.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/05/21/leetcode199. 二叉树的右视图/</id>
    <published>2019-05-21T13:46:54.492Z</published>
    <updated>2019-05-21T14:18:57.470Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><p>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p><p><strong>示例:</strong></p><p><strong>输入:</strong> [1,2,3,null,5,null,4]<br><strong>输出:</strong> [1, 3, 4]<br><strong>解释:</strong></p><p>   <img src="https://img-blog.csdnimg.cn/2019052121450834.png" alt="1            &lt;--- /   \2     3         &lt;--- \     \  5     4       &lt;---"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p> 层次遍历，使用一个队列，每次把右结点先放入，再放入左结点，每一层的最右个结点加入结果即可。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;Integer&gt; rightSideView(TreeNode root) &#123;</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            return new ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        while (!queue.isEmpty())&#123;</span><br><span class="line">            TreeNode tn = queue.peek();</span><br><span class="line">            int size = queue.size();</span><br><span class="line">            res.add(tn.val);</span><br><span class="line">            while(size &gt; 0)&#123;</span><br><span class="line">                tn = queue.remove();</span><br><span class="line">                if (tn.right != null)&#123;</span><br><span class="line">                    queue.add(tn.right);</span><br><span class="line">                &#125;</span><br><span class="line">                if (tn.left != null) &#123;</span><br><span class="line">                    queue.add(tn.left);</span><br><span class="line">                &#125;</span><br><span class="line">                size --;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 3 ms, 在Binary Tree Right Side View的Java提交中击败了69.61% 的用户<br>内存消耗 : 35.1 MB, 在Binary Tree Right Side View的Java提交中击败了44.50% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;p&gt;给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; [1,2,3,null,5,null,4]
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode187. 重复的DNA序列</title>
    <link href="http://yoursite.com/2019/05/21/leetcode187.%20%E9%87%8D%E5%A4%8D%E7%9A%84DNA%E5%BA%8F%E5%88%97/"/>
    <id>http://yoursite.com/2019/05/21/leetcode187. 重复的DNA序列/</id>
    <published>2019-05-21T12:56:09.221Z</published>
    <updated>2019-05-21T14:19:10.354Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>所有 DNA 由一系列缩写为 A，C，G 和 T 的核苷酸组成，例如：“ACGAATTCCG”。在研究 DNA 时，识别 DNA<br>中的重复序列有时会对研究非常有帮助。</p><p>编写一个函数来查找 DNA 分子中所有出现超多一次的10个字母长的序列（子串）。</p><p><strong>示例:</strong></p><p><strong>输入:</strong> s = “AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT”</p><p><strong>输出:</strong> [“AAAAACCCCC”, “CCCCCAAAAA”]</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用一个集合set，遍历一遍字符串，如果存入集合成功，则说明字符串是第一次出现，如果存入集合不成功，说明该字符串不是第一次出现，存入结果集合，最后把结果集合res转为链表返回即可。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public List&lt;String&gt; findRepeatedDnaSequences(String s) &#123;</span><br><span class="line">        Set&lt;String&gt; set = new HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; res = new HashSet&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt;= s.length()-10; i++) &#123;</span><br><span class="line">            String str = s.substring(i,i+10);</span><br><span class="line">            if(!set.add(str))&#123;</span><br><span class="line">                res.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return new ArrayList&lt;&gt;(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 59 ms, 在Repeated DNA Sequences的Java提交中击败了42.82% 的用户<br>内存消耗 : 54.6 MB, 在Repeated DNA Sequences的Java提交中击败了19.19% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有 DNA 由一系列缩写为 A，C，G 和 T 的核苷酸组成，例如：“ACGAATTCCG”。在研究 DNA 时，识别 DNA&lt;br&gt;中的重复序列有时会对研究非常有帮助。&lt;/p&gt;
&lt;p&gt;编写一个函数来查找 DNA 分子
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode180. 连续出现的数字</title>
    <link href="http://yoursite.com/2019/05/20/leetcode180.%20%E8%BF%9E%E7%BB%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2019/05/20/leetcode180. 连续出现的数字/</id>
    <published>2019-05-20T07:54:31.140Z</published>
    <updated>2019-05-20T07:58:06.705Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>编写一个 SQL 查询，查找所有至少连续出现三次的数字。</p><p><img src="https://img-blog.csdnimg.cn/20190520155314412.png" alt="+----+-----+ | Id | Num |+----+-----+ | 1  |  1  | | 2  |  1  | | 3  |  1  | | 4  |  2  | | 5  |  1  | | 6  |  2  | | 7  |  2  |+----+-----+"> 例如，给定上面的 Logs 表， 1 是唯一连续出现至少三次的数字。</p><p><img src="https://img-blog.csdnimg.cn/2019052015532164.png" alt="+-----------------+ | ConsecutiveNums |+-----------------+ | 1               |+-----------------+"></p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>直接查找3行num相等的数据即可</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><pre><code>select distinct l1.num as ConsecutiveNumsfrom logs l1, logs l2, logs l3where l1.id = l2.id-1 and l2.id = l3.id-1 andl1.num = l2.num and l2.num = l3.num</code></pre><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 782 ms, 在Consecutive Numbers的MySQL提交中击败了41.07% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编写一个 SQL 查询，查找所有至少连续出现三次的数字。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190520155314412.png&quot; alt=&quot;+----+--
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>leetcode179. 最大数</title>
    <link href="http://yoursite.com/2019/05/20/leetcode179.%20%E6%9C%80%E5%A4%A7%E6%95%B0/"/>
    <id>http://yoursite.com/2019/05/20/leetcode179. 最大数/</id>
    <published>2019-05-20T07:39:29.516Z</published>
    <updated>2019-05-20T07:55:27.589Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong> [10,2]<br><strong>输出:</strong> 210<br><strong>示例 2:</strong></p><p><strong>输入:</strong> [3,30,34,5,9]<br><strong>输出:</strong> 9534330<br><strong>说明:</strong> 输出结果可能非常大，所以你需要返回一个字符串而不是整数。</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>直接重新排序规则即可。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String largestNumber(int[] nums) &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;Integer&gt;();</span><br><span class="line">        for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">            arrayList.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(arrayList, new Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            public int compare(Integer o1, Integer o2) &#123;</span><br><span class="line">                String a = o1.toString();</span><br><span class="line">                String b = o2.toString();</span><br><span class="line">                Long res = Long.parseLong(b+a) - Long.parseLong(a+b);</span><br><span class="line">                return res.intValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        StringBuilder res = new StringBuilder(nums.length);</span><br><span class="line">        for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">            res.append(arrayList.get(i));</span><br><span class="line">            if (i==0 &amp;&amp; Integer.parseInt(res.toString()) == 0)&#123;</span><br><span class="line">                return &quot;0&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 17 ms, 在Largest Number的Java提交中击败了75.24% 的用户<br>内存消耗 : 35.7 MB, 在Largest Number的Java提交中击败了98.40% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; [10,2]&lt;br&gt;&lt;strong&gt;输出:
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode178. 分数排名</title>
    <link href="http://yoursite.com/2019/05/18/leetcode178.%20%E5%88%86%E6%95%B0%E6%8E%92%E5%90%8D/"/>
    <id>http://yoursite.com/2019/05/18/leetcode178. 分数排名/</id>
    <published>2019-05-18T08:53:44.889Z</published>
    <updated>2019-05-18T08:55:18.443Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>SQL架构 编写一个 SQL<br>查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。<br><img src="https://img-blog.csdnimg.cn/20190518165127349.png" alt="在这里插入图片描述"><br>例如，根据上述给定的 Scores 表，你的查询应该返回（按分数从高到低排列）：<br><img src="https://img-blog.csdnimg.cn/20190518165134884.png" alt="在这里插入图片描述"></p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>排序score，找出有多少个score（去除重复distinct）比当前score多，当前的rank即为其+1。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select s1.score, </span><br><span class="line">(select count(distinct s2.score)+1 </span><br><span class="line">from scores s2 </span><br><span class="line">where s2.score &gt; s1.score ) rank </span><br><span class="line">from scores s1 </span><br><span class="line">order by s1.score desc;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 833 ms, 在Rank Scores的MySQL提交中击败了63.26% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL架构 编写一个 SQL&lt;br&gt;查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。&lt;br&gt;&lt;img src=
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>leetcode177. 第N高的薪水</title>
    <link href="http://yoursite.com/2019/05/18/leetcode177.%20%E7%AC%ACN%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4/"/>
    <id>http://yoursite.com/2019/05/18/leetcode177. 第N高的薪水/</id>
    <published>2019-05-18T08:50:42.459Z</published>
    <updated>2019-05-18T08:55:34.214Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>编写一个 SQL 查询，获取 Employee 表中第 n 高的薪水（Salary）。</p><p><img src="https://img-blog.csdnimg.cn/20190518164733734.png" alt="+----+--------+ | Id | Salary |+----+--------+ | 1  | 100    | | 2  | 200    | | 3  | 300    |+----+--------+"><br>例如上述 Employee 表，n = 2 时，应返回第二高的薪水 200。如果不存在第 n 高的薪水，那么查询应返回 null。</p><p><img src="https://img-blog.csdnimg.cn/2019051816474423.png" alt="+------------------------+ | getNthHighestSalary(2) |+------------------------+ | 200                    |+------------------------+"></p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>根据salary去重（distinct）降序排序（order by salary desc），然后找出第n-1行即可。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  Set N = N -1;</span><br><span class="line">  RETURN (</span><br><span class="line">      select distinct salary from employee</span><br><span class="line">      order by salary desc</span><br><span class="line">      limit 1 offset N</span><br><span class="line">  );</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 327 ms, 在Nth Highest Salary的MySQL提交中击败了89.32% 的用户<br>内存消耗 : N/A</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编写一个 SQL 查询，获取 Employee 表中第 n 高的薪水（Salary）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190518164733734.png
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>leetcode173. 二叉搜索树迭代器</title>
    <link href="http://yoursite.com/2019/05/18/leetcode173.%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://yoursite.com/2019/05/18/leetcode173. 二叉搜索树迭代器/</id>
    <published>2019-05-18T08:26:49.430Z</published>
    <updated>2019-05-18T08:54:51.078Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。</p><p>调用 next() 将返回二叉搜索树中的下一个最小的数。</p><p><strong>示例：</strong><br><img src="https://img-blog.csdnimg.cn/20190518162407757.png" alt="在这里插入图片描述"><br>BSTIterator iterator = new BSTIterator(root); iterator.next();    //<br>返回 3 iterator.next();    // 返回 7 iterator.hasNext(); // 返回 true<br>iterator.next();    // 返回 9 iterator.hasNext(); // 返回 true<br>iterator.next();    // 返回 15 iterator.hasNext(); // 返回 true<br>iterator.next();    // 返回 20 iterator.hasNext(); // 返回 false  </p><p><strong>提示：</strong></p><p>next() 和 hasNext() 操作的时间复杂度是 O(1)，并使用 O(h) 内存，其中 h 是树的高度。 你可以假设 next()<br>调用总是有效的，也就是说，当调用 next() 时，BST 中至少存在一个下一个最小的数。</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用中序遍历，把二叉搜索树的数据存入到一个链表list中，即链表的有序的，然后每次next（）返回其链表的开头元素即可。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class BSTIterator &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; list = new LinkedList&lt;Integer&gt;();</span><br><span class="line">    public BSTIterator(TreeNode root) &#123;</span><br><span class="line">        inOrder(list, root);</span><br><span class="line">    &#125;</span><br><span class="line">    public void inOrder(List&lt;Integer&gt; list, TreeNode root)&#123;</span><br><span class="line">        if(root == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        inOrder(list, root.left);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        inOrder(list, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    public int next() &#123;</span><br><span class="line">        return list.pollFirst();</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean hasNext() &#123;</span><br><span class="line">        return list.size() &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 95 ms, 在Binary Search Tree Iterator的Java提交中击败了97.48% 的用户<br>内存消耗 : 49.2 MB, 在Binary Search Tree Iterator的Java提交中击败了99.47% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。&lt;/p&gt;
&lt;p&gt;调用 next() 将返回二叉搜索树中的下一个最小的数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;br&gt;&lt;img src=
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode147. 对链表进行插入排序</title>
    <link href="http://yoursite.com/2019/05/17/leetcode147.%20%E5%AF%B9%E9%93%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/05/17/leetcode147. 对链表进行插入排序/</id>
    <published>2019-05-17T12:26:32.793Z</published>
    <updated>2019-05-18T08:54:31.173Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>对链表进行插入排序。</p><p>插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。<br>每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。</p><p>插入排序算法：</p><p>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。<br>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。 重复直到所有输入数据插入完为止。  </p><p><strong>示例 1：</strong></p><p><strong>输入:</strong> 4-&gt;2-&gt;1-&gt;3<br><strong>输出:</strong> 1-&gt;2-&gt;3-&gt;4<br><strong>示例 2：</strong></p><p><strong>输入:</strong> -1-&gt;5-&gt;3-&gt;4-&gt;0<br><strong>输出:</strong> -1-&gt;0-&gt;3-&gt;4-&gt;5</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>就是在链表上实现插入排序，注意链表的指针更新和链表的链接即可。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode insertionSortList(ListNode head) &#123;</span><br><span class="line">        if(head == null) return null;</span><br><span class="line">        ListNode p = head.next;</span><br><span class="line">        ListNode ppre = head;</span><br><span class="line"></span><br><span class="line">        while (p != null) &#123;</span><br><span class="line">            boolean flag = false;</span><br><span class="line">            ListNode q = p.next;</span><br><span class="line">            ListNode x = head;ListNode xpre = null;</span><br><span class="line">            for (; x != p;xpre= x, x = x.next)</span><br><span class="line">                if (x.val &gt; p.val) &#123;</span><br><span class="line">                    flag = true;</span><br><span class="line">                    if (x == head) &#123;</span><br><span class="line">                        p.next = head;</span><br><span class="line">                        head = p;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        xpre.next = p;</span><br><span class="line">                        p.next = x;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ppre.next = q;</span><br><span class="line">                    p = q;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            if(!flag)&#123;</span><br><span class="line">                ppre = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 36 ms, 在Insertion Sort List的Java提交中击败了64.10% 的用户<br>内存消耗 : 38.6 MB, 在Insertion Sort List的Java提交中击败了49.22% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对链表进行插入排序。&lt;/p&gt;
&lt;p&gt;插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。&lt;br&gt;每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。&lt;/
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode142. 环形链表 II</title>
    <link href="http://yoursite.com/2019/05/17/leetcode142.%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%20II/"/>
    <id>http://yoursite.com/2019/05/17/leetcode142. 环形链表 II/</id>
    <published>2019-05-16T16:17:21.751Z</published>
    <updated>2019-05-16T16:17:59.747Z</updated>
    
    <content type="html"><![CDATA[<h4 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">142. 环形链表 II</a></h4><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p><p><strong>说明：</strong>不允许修改给定的链表。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">&gt; 输出：tail connects to node index 1</span><br><span class="line">&gt; 解释：链表中有一个环，其尾部连接到第二个节点。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 输入：head = [1,2], pos = 0</span><br><span class="line">&gt; 输出：tail connects to node index 0</span><br><span class="line">&gt; 解释：链表中有一个环，其尾部连接到第一个节点。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 输入：head = [1], pos = -1</span><br><span class="line">&gt; 输出：no cycle</span><br><span class="line">&gt; 解释：链表中没有环。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p><p><strong>进阶：</strong><br>你是否可以不用额外空间解决此题？</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>可以使用一个集合set，然后遍历一遍链表，判断set中是否存在结点，如果存在则说明是该结点，如果不存在，则把结点放入set中，如果指针走到null，则说明没有环，返回null。</p></li><li><p>使用快慢指针的方法，这个方法有点难想到，快慢指针可以判断出链表中是否存在环，你使用快慢指针走一遍，可以发现，快慢指针相遇的结点到环开始的结点和head到环开始的结点是一样的长度的。</p><p>证明的结果如下（链表有环的情况）：</p><p>head到环开始的结点长度为L1，环的长度为L2，假设快慢指针相遇时，慢指针走的长度为x，则快指针走的长度为2x，因为快指针饶了环一圈再遇见满指针，所以2x-x=L2；</p><p>所以2x+L1=x+L1(上条公式转换来的)，因为两指针要在环开头相遇，只要快指针比满指针多走L2即可，所以两个指针再走L1即可。</p></li></ol><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public ListNode detectCycle(ListNode head) &#123;</span><br><span class="line">        if(head == null) return null;</span><br><span class="line">        if(head.next == null) return null;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        while(fast != null &amp;&amp; fast.next != null) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            if(slow == fast)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(slow == fast) &#123;</span><br><span class="line">            fast = head;</span><br><span class="line">            while(slow != fast)&#123;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">            &#125;</span><br><span class="line">            return fast;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功</p><p>显示详情 </p><p>执行用时 : 1 ms, 在Linked List Cycle II的Java提交中击败了98.83% 的用户</p><p>内存消耗 : 34.9 MB, 在Linked List Cycle II的Java提交中击败了25.93% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;142-环形链表-II&quot;&gt;&lt;a href=&quot;#142-环形链表-II&quot; class=&quot;headerlink&quot; title=&quot;142. 环形链表 II&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/linked-lis
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode304. 二维区域和检索 - 矩阵不可变</title>
    <link href="http://yoursite.com/2019/05/16/leetcode304.%20%E4%BA%8C%E7%BB%B4%E5%8C%BA%E5%9F%9F%E5%92%8C%E6%A3%80%E7%B4%A2%20-%20%E7%9F%A9%E9%98%B5%E4%B8%8D%E5%8F%AF%E5%8F%98/"/>
    <id>http://yoursite.com/2019/05/16/leetcode304. 二维区域和检索 - 矩阵不可变/</id>
    <published>2019-05-16T11:03:41.163Z</published>
    <updated>2019-05-16T11:04:59.819Z</updated>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><blockquote><p>给定一个二维矩阵，计算其子矩形范围内元素的总和，该子矩阵的左上角为 (row1, col1) ，右下角为 (row2, col2)。<br>//原题目也没有图 上图子矩阵左上角 (row1, col1) = (2, 1) ，右下角(row2, col2) = (4,<br>3)，该子矩形内元素的总和为 8。</p><p><strong>示例:</strong></p><p>给定 matrix = [   [3, 0, 1, 4, 2],   [5, 6, 3, 2, 1],   [1, 2, 0, 1, 5],<br>[4, 1, 0, 1, 7],   [1, 0, 3, 0, 5] ]</p><p>sumRegion(2, 1, 4, 3) -&gt; 8 sumRegion(1, 1, 2, 2) -&gt; 11 sumRegion(1, 2,<br>2, 4) -&gt; 12<br><strong>说明:</strong></p><p>你可以假设矩阵不可变。 会多次调用 sumRegion 方法。 你可以假设 row1 ≤ row2 且 col1 ≤ col2。</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>使用一个二维数组sum，sum[i, j]保存 <strong>matrix[0,0]到matrix[i,j]</strong> 的和，然后sumRegion方法返回 <strong>sum[row2][col2]-sum[row2][col1-1]-sum[row1-1][col2] + sum[row1-1][col1-1]</strong> 即可，思路很清晰简单。</p><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line">class NumMatrix &#123;</span><br><span class="line">    int[][] matrix;</span><br><span class="line">    int[][] sum ;</span><br><span class="line">    public NumMatrix(int[][] matrix) &#123;</span><br><span class="line">        if(matrix.length &lt;= 0 || matrix[0].length &lt;= 0) return ;</span><br><span class="line">        this.matrix = new int[matrix.length][matrix[0].length];</span><br><span class="line">        this.matrix =  matrix.clone();</span><br><span class="line">        this.init();</span><br><span class="line">    &#125;</span><br><span class="line">    public void init()&#123;</span><br><span class="line">        sum = new int[matrix.length][matrix[0].length];</span><br><span class="line">        sum[0][0] = matrix[0][0];</span><br><span class="line">        for(int i = 1; i &lt; sum[0].length; i ++)&#123;</span><br><span class="line">            sum[0][i] = matrix[0][i]+sum[0][i-1];       </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        for(int i = 1; i &lt; sum.length; i ++)&#123;</span><br><span class="line">            sum[i][0] = matrix[i][0] + sum[i-1][0];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        for(int i = 1; i &lt; sum.length; i ++)&#123;</span><br><span class="line">            for(int j = 1; j &lt; sum[i].length; j ++)&#123;</span><br><span class="line">                sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int sumRegion(int row1, int col1, int row2, int col2) &#123;</span><br><span class="line">    //越界判断，也可以sum数组再多一行一列，空间换时间--不用进行判断</span><br><span class="line">        if(row1 == 0 &amp;&amp; col1 == 0) &#123;</span><br><span class="line">            return sum[row2][col2];</span><br><span class="line">        &#125;</span><br><span class="line">        if(row1 == 0)&#123;</span><br><span class="line">            return sum[row2][col2]- sum[row2][col1 -1];</span><br><span class="line">        &#125;</span><br><span class="line">        if(col1 == 0)&#123;</span><br><span class="line">            return sum[row2][col2]- sum[row1-1][col2];</span><br><span class="line">        &#125;</span><br><span class="line">        return sum[row2][col2]-sum[row2][col1-1]-sum[row1-1][col2] + sum[row1-1][col1-1];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交结果"><a href="#提交结果" class="headerlink" title="提交结果"></a>提交结果</h2><p>成功<br>显示详情<br>执行用时 : 127 ms, 在Range Sum Query 2D - Immutable的Java提交中击败了80.42% 的用户<br>内存消耗 : 46.6 MB, 在Range Sum Query 2D - Immutable的Java提交中击败了87.50% 的用户</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿## 题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个二维矩阵，计算其子矩形范围内元素的总和，该子矩阵的左上角为 (row1, col1) ，右下角为 (row2, col2)。&lt;br&gt;//原题目也没有图 上图子矩阵左上角 (row1, col1) = (2, 1)
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
